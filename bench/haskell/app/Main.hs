module Main where
import Control.Monad (replicateM)
import System.CPUTime (getCPUTime)
import Text.Printf (printf)
import Data.List(sort, find)

measureExecutionTime :: (a -> b) -> a -> Int -> IO Double
measureExecutionTime f arg iterations = do
  times <- replicateM iterations $ do
    start <- getCPUTime
    let result = f arg
    end <- getCPUTime
    return $ fromIntegral (end - start) / (10 ^ 9) -- Convert to milliseconds
  return $ sum times / fromIntegral iterations

list :: [Int]
list = [
  474, 375, 368, 491, 229, 287, 212, 558, 411, 988, 904, 171, 856, 595, 112, 326, 113, 727, 665,
  535, 93, 77, 809, 567, 80, 978, 33, 559, 951, 513, 199, 634, 96, 267, 974, 725, 44, 143, 733,
  206, 435, 437, 417, 253, 281, 128, 575, 971, 884, 442, 710, 57, 577, 704, 988, 780, 61, 393,
  922, 83, 1000, 255, 676, 243, 427, 322, 131, 203, 781, 218, 722, 109, 446, 611, 459, 433, 811,
  660, 825, 446, 897, 303, 175, 541, 646, 131, 306, 267, 81, 386, 129, 904, 70, 842, 47, 453, 286,
  804, 313, 480, 381, 711, 725, 201, 467, 749, 105, 468, 657, 280, 706, 838, 775, 774, 592, 824,
  752, 379, 984, 869, 835, 564, 491, 854, 419, 534, 864, 406, 815, 438, 308, 391, 773, 419, 205,
  381, 556, 205, 318, 132, 484, 415, 479, 620, 760, 703, 439, 622, 207, 979, 691, 768, 748, 67,
  312, 443, 295, 884, 908, 430, 145, 298, 195, 208, 28, 802, 781, 508, 705, 519, 838, 199, 617,
  653, 430, 158, 312, 357, 869, 574, 684, 785, 667, 223, 481, 97, 30, 540, 712, 327, 188, 675,
  225, 918, 565, 268, 628, 847, 982, 827, 426, 840, 700, 630, 609, 202, 577, 752, 458, 339, 466,
  556, 959, 347, 964, 940, 430, 396, 835, 905, 605, 722, 547, 578, 466, 341, 906, 598, 117, 735,
  972, 798, 756, 957, 144, 937, 492, 208, 440, 950, 682, 420, 613, 72, 40, 802, 458, 661, 898, 58,
  424, 823, 918, 951, 265, 872, 844, 170, 305, 886, 614, 844, 860, 259, 441, 816, 329, 468, 74,
  36, 683, 88, 210, 157, 183, 406, 189, 98, 331, 355, 467, 232, 231, 333, 602, 683, 186, 606, 814,
  522, 494, 927, 158, 364, 350, 760, 828, 400, 560, 979, 120, 62, 633, 469, 620, 978, 713, 855,
  541, 363, 45, 685, 473, 715, 510, 65, 754, 65, 982, 426, 877, 102, 927, 807, 516, 520, 954, 204,
  629, 29, 63, 518, 501, 787, 573, 58, 553, 295, 124, 608, 82, 793, 355, 1, 752, 373, 78, 606,
  205, 521, 323, 983, 61, 549, 520, 639, 820, 824, 953, 978, 372, 496, 661, 843, 719, 605, 978,
  104, 944, 368, 1000, 853, 819, 799, 290, 483, 824, 959, 946, 358, 200, 958, 881, 798, 613, 937,
  388, 243, 831, 252, 911, 440, 579, 760, 892, 987, 716, 45, 856, 2, 838, 644, 309, 281, 349, 863,
  778, 204, 323, 226, 467, 336, 701, 370, 732, 773, 329, 103, 709, 805, 71, 725, 98, 299, 594,
  512, 923, 330, 115, 609, 283, 401, 529, 359, 561, 715, 192, 18, 225, 126, 915, 183, 709, 492,
  657, 281, 18, 270, 40, 25, 463, 662, 968, 245, 906, 970, 335, 625, 867, 470, 123, 586, 67, 40,
  277, 606, 59, 17, 887, 944, 471, 51, 780, 113, 942, 3, 668, 483, 329, 254, 490, 298, 739, 318,
  710, 496, 277, 434, 324, 89, 240, 649, 636, 442, 827, 281, 522, 407, 116, 536, 543, 243, 491,
  275, 787, 413, 677, 622, 826, 364, 533, 498, 875, 123, 189, 692, 899, 57, 405, 532, 970, 952,
  368, 595, 763, 227, 414, 295, 894, 400, 867, 387, 85, 766, 962, 306, 659, 997, 421, 922, 118,
  691, 939, 631, 867, 991, 143, 908, 665, 595, 839, 628, 343, 553, 171, 160, 432, 18, 243, 899,
  695, 264, 139, 607, 295, 32, 331, 528, 182, 635, 817, 836, 699, 595, 188, 521, 902, 159, 668,
  71, 555, 922, 716, 713, 607, 907, 705, 668, 66, 708, 18, 132, 912, 957, 949, 727, 406, 187, 130,
  447, 391, 143, 999, 758, 310, 177, 480, 231, 36, 339, 564, 684, 202, 750, 356, 409, 426, 680,
  121, 128, 578, 676, 881, 384, 892, 901, 51, 136, 84, 298, 702, 75, 319, 285, 913, 409, 930, 405,
  218, 918, 565, 27, 69, 767, 385, 902, 132, 113, 374, 414, 457, 253, 463, 667, 606, 282, 102,
  934, 204, 971, 121, 488, 915, 993, 1000, 191, 785, 68, 926, 220, 305, 492, 546, 862, 1000, 126,
  331, 478, 373, 320, 318, 501, 98, 901, 231, 143, 614, 66, 722, 112, 503, 565, 442, 543, 142,
  511, 662, 918, 289, 777, 808, 377, 717, 73, 669, 318, 718, 419, 395, 558, 934, 168, 902, 105,
  485, 660, 978, 686, 769, 378, 776, 467, 199, 769, 206, 812, 291, 209, 896, 771, 257, 774, 808,
  235, 136, 402, 512, 735, 655, 295, 247, 278, 195, 530, 292, 142, 672, 25, 939, 531, 256, 562,
  867, 419, 879, 169, 577, 737, 932, 345, 82, 686, 521, 796, 363, 881, 679, 486, 548, 23, 477,
  666, 145, 935, 744, 806, 235, 77, 424, 407, 424, 873, 955, 628, 351, 579, 42, 722, 688, 799,
  568, 327, 600, 930, 934, 605, 335, 648, 273, 4, 695, 508, 433, 141, 727, 198, 506, 488, 349,
  659, 870, 493, 586, 482, 308, 202, 421, 475, 997, 79, 950, 725, 22, 236, 143, 307, 517, 581,
  555, 865, 729, 990, 764, 363, 398, 479, 580, 142, 736, 953, 502, 875, 300, 27, 414, 511, 128,
  346, 716, 272, 831, 606, 331, 27, 92, 359, 556, 73, 44, 208, 889, 382, 602, 601, 317, 730, 861,
  507, 672, 144, 464, 948, 199, 724, 417, 350, 381, 996, 659, 806, 68, 591, 7, 932, 214, 954, 743,
  725, 90, 810, 284, 463, 364, 592, 699, 536, 822, 135, 590, 189, 394, 582, 331, 362, 461, 451,
  502, 688, 174, 653, 314, 72, 586, 72, 391, 498, 776, 132, 935, 357, 597, 444, 989, 551, 773,
  138, 839, 323, 954, 942, 59, 602, 808, 692, 387, 981, 793, 727, 171, 753, 490, 717, 556, 254,
  359, 734, 930, 498, 154, 414, 569, 938, 888, 500, 154, 596, 821, 294, 656, 485, 267, 567, 736,
  390, 817, 70, 978, 578, 889, 788, 318, 186, 893, 617, 247, 860, 309, 658, 554, 175, 904, 34,
  330, 7, 382, 559, 11, 452, 984, 671, 887, 498, 789, 768, 508, 385, 265, 794, 780, 385
 ]

findEl :: Int -> Maybe Int
findEl el = find (==el) list

main :: IO ()
main = do
  let warmupIterations = 10000
  let measureIterations = 10000
  
  print "============================="
  print "Running list#sort..."
  print "Running warmup iterations"
  _ <- measureExecutionTime sort list warmupIterations
  print "Running measure iterations"
  time1 <- measureExecutionTime sort list measureIterations
  printf "Result is: %f ms\n" time1

  print "============================="
  print "Running list#find..."
  print "Running warmup iterations"
  _ <- measureExecutionTime findEl 569 warmupIterations
  print "Running measure iterations"
  time2 <- measureExecutionTime findEl 569 measureIterations
  printf "Result is: %f ms\n" time2
